import java.util.*;
public class Main    
{    
    static int NO_OF_CHARS = 256; 
    public static void main(String[] args) 
    {    
        
		
	 
        String s,s1; 
		Scanner sc = new Scanner(System.in);
 		System.out.println("Enter a transition state"); 
 		s = sc.nextLine();  
 		char[] pat = s.toCharArray(); 
 		System.out.println("What path you want to search");
 		s1=sc.nextLine();
 		char[] txt = s1.toCharArray();
        int count = 0;  
        System.out.println("Enter the total number of node");
        int n = sc.nextInt();
        System.out.println("Total number of possible ways"+(n*(n-1)));
        for(int i = 0; i < s.length(); i++) {    
            if(s.charAt(i) != ' ')    
                count++;    
        } 
        if(n-count>=2){
            System.out.println("error  in inputs not possible to track the path");
        }else{
            search(txt,pat);

        }
            
        System.out.println("Total number of characters in a string: " + count);    
    }
    	static int getNextState(char[] pat, int M, 
							int state, int x) { 
		
		
		if(state < M && x == pat[state]) 
			return state + 1; 
			
	
		int ns, i; 


		for (ns = state; ns > 0; ns--) 
		{ 
			if (pat[ns-1] == x) 
			{ 
				for (i = 0; i < ns-1; i++) 
					if (pat[i] != pat[state-ns+1+i]) 
						break; 
					if (i == ns-1) 
						return ns; 
			} 
		} 

			return 0; 
	}
	static void computeTF(char[] pat, int M, int TF[][]) 
	{ 
		int state, x; 
		for (state = 0; state <= M; ++state) 
			for (x = 0; x < NO_OF_CHARS; ++x) 
				TF[state][x] = getNextState(pat, M, state, x); 
	}
		static void search(char[] pat, char[] txt) 
	{ 
		int M = pat.length; 
		int N = txt.length; 

		int[][] TF = new int[M+1][NO_OF_CHARS]; 

		computeTF(pat, M, TF); 
		int i, state = 0; 
		for (i = 0; i < N; i++) 
		{ 
			state = TF[state][txt[i]]; 
			if (state == M) 
				System.out.println("Pattern found "
						+ "at index " + (i-M+1)); 
		}

}
}     
